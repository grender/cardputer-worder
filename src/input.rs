use crate::keyboard::{Key, KeyEvent};

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum InputLanguage {
    En,
    Ru,
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum PressedSymbol {
    Char(char),
    Esc,
    Del,
    Backspace,
    Tab,
    Enter,
    ArrowUp,
    ArrowDown,
    ArrowLeft,
    ArrowRight,
}

pub struct InputState {
    pub ctrl_pressed: bool,
    pub shift_pressed: bool,
    pub opt_pressed: bool,
    pub alt_pressed: bool,
    pub fn_pressed: bool,
    pub lang: InputLanguage,
}

impl InputState {
    fn key_to_pressed_symbol(&self, key: Key) -> Option<PressedSymbol> {
        let symbol_map = match (self.lang, self.shift_pressed) {
            (InputLanguage::En, true) => SYMBOL_MAP_EN_SHIFTED,
            (InputLanguage::En, false) => SYMBOL_MAP_EN,
            (InputLanguage::Ru, true) => SYMBOL_MAP_RU_SHIFTED,
            (InputLanguage::Ru, false) => SYMBOL_MAP_RU,
        };
        return symbol_map[key as usize];
    }

    pub fn switch_language(&mut self) {
        if self.lang == InputLanguage::En {
            self.lang = InputLanguage::Ru
        } else {
            self.lang = InputLanguage::En
        }
    }

    pub fn eat_keys(&mut self, event: KeyEvent, key: Key) -> Option<PressedSymbol> {
        match (event, key) {
            (KeyEvent::Pressed, Key::Opt) => self.opt_pressed = true,
            (KeyEvent::Pressed, Key::Shift) => self.shift_pressed = true,
            (KeyEvent::Pressed, Key::Alt) => self.alt_pressed = true,
            (KeyEvent::Pressed, Key::Ctrl) => self.ctrl_pressed = true,
            (KeyEvent::Pressed, Key::Fn) => self.fn_pressed = true,

            (KeyEvent::Released, Key::Opt) => self.opt_pressed = false,
            (KeyEvent::Released, Key::Shift) => self.shift_pressed = false,
            (KeyEvent::Released, Key::Alt) => self.alt_pressed = false,
            (KeyEvent::Released, Key::Ctrl) => self.ctrl_pressed = false,
            (KeyEvent::Released, Key::Fn) => self.fn_pressed = false,
            _ => {}
        }



        return match (event, key, self.ctrl_pressed, self.fn_pressed) {
            (KeyEvent::Pressed, Key::Space, true, _) => {
                self.switch_language();
                None
            },
            (_, Key::Tilde, _, true) => Some(PressedSymbol::Esc),
            (_, Key::Backspace, _, true) => Some(PressedSymbol::Del),
            (_, Key::Semicolon, _, true) => Some(PressedSymbol::ArrowUp),
            (_, Key::Slash, _, true) => Some(PressedSymbol::ArrowRight),
            (_, Key::Comma, _, true) => Some(PressedSymbol::ArrowLeft),
            (_, Key::Period, _, true) => Some(PressedSymbol::ArrowDown),
            _ => self.key_to_pressed_symbol(key),
        };
    }
}

const SYMBOL_MAP_EN: [Option<PressedSymbol>; 56] = [
    None,
    Some(PressedSymbol::Char('z')),
    Some(PressedSymbol::Char('c')),
    Some(PressedSymbol::Char('b')),
    Some(PressedSymbol::Char('m')),
    Some(PressedSymbol::Char('.')),
    Some(PressedSymbol::Char(' ')),
    None,
    Some(PressedSymbol::Char('s')),
    Some(PressedSymbol::Char('f')),
    Some(PressedSymbol::Char('h')),
    Some(PressedSymbol::Char('k')),
    Some(PressedSymbol::Char(';')),
    Some(PressedSymbol::Enter),
    Some(PressedSymbol::Char('q')),
    Some(PressedSymbol::Char('e')),
    Some(PressedSymbol::Char('t')),
    Some(PressedSymbol::Char('u')),
    Some(PressedSymbol::Char('o')),
    Some(PressedSymbol::Char('[')),
    Some(PressedSymbol::Char('\\')),
    Some(PressedSymbol::Char('1')),
    Some(PressedSymbol::Char('3')),
    Some(PressedSymbol::Char('5')),
    Some(PressedSymbol::Char('7')),
    Some(PressedSymbol::Char('9')),
    Some(PressedSymbol::Char('_')),
    Some(PressedSymbol::Backspace),
    None,
    None,
    Some(PressedSymbol::Char('x')),
    Some(PressedSymbol::Char('v')),
    Some(PressedSymbol::Char('n')),
    Some(PressedSymbol::Char(',')),
    Some(PressedSymbol::Char('/')),
    None,
    Some(PressedSymbol::Char('a')),
    Some(PressedSymbol::Char('d')),
    Some(PressedSymbol::Char('g')),
    Some(PressedSymbol::Char('j')),
    Some(PressedSymbol::Char('l')),
    Some(PressedSymbol::Char('\'')),
    Some(PressedSymbol::Tab),
    Some(PressedSymbol::Char('w')),
    Some(PressedSymbol::Char('r')),
    Some(PressedSymbol::Char('y')),
    Some(PressedSymbol::Char('i')),
    Some(PressedSymbol::Char('p')),
    Some(PressedSymbol::Char(']')),
    Some(PressedSymbol::Char('`')),
    Some(PressedSymbol::Char('2')),
    Some(PressedSymbol::Char('4')),
    Some(PressedSymbol::Char('6')),
    Some(PressedSymbol::Char('8')),
    Some(PressedSymbol::Char('0')),
    Some(PressedSymbol::Char('=')),
];

const SYMBOL_MAP_EN_SHIFTED: [Option<PressedSymbol>; 56] = [
    None,
    Some(PressedSymbol::Char('Z')),
    Some(PressedSymbol::Char('C')),
    Some(PressedSymbol::Char('B')),
    Some(PressedSymbol::Char('M')),
    Some(PressedSymbol::Char('>')),
    Some(PressedSymbol::Char(' ')),
    None,
    Some(PressedSymbol::Char('S')),
    Some(PressedSymbol::Char('F')),
    Some(PressedSymbol::Char('H')),
    Some(PressedSymbol::Char('K')),
    Some(PressedSymbol::Char(':')),
    Some(PressedSymbol::Enter),
    Some(PressedSymbol::Char('Q')),
    Some(PressedSymbol::Char('E')),
    Some(PressedSymbol::Char('T')),
    Some(PressedSymbol::Char('U')),
    Some(PressedSymbol::Char('O')),
    Some(PressedSymbol::Char('{')),
    Some(PressedSymbol::Char('|')),
    Some(PressedSymbol::Char('!')),
    Some(PressedSymbol::Char('#')),
    Some(PressedSymbol::Char('%')),
    Some(PressedSymbol::Char('&')),
    Some(PressedSymbol::Char('(')),
    Some(PressedSymbol::Char('-')),
    Some(PressedSymbol::Backspace),
    None,
    None,
    Some(PressedSymbol::Char('X')),
    Some(PressedSymbol::Char('V')),
    Some(PressedSymbol::Char('N')),
    Some(PressedSymbol::Char('<')),
    Some(PressedSymbol::Char('?')),
    None,
    Some(PressedSymbol::Char('A')),
    Some(PressedSymbol::Char('D')),
    Some(PressedSymbol::Char('G')),
    Some(PressedSymbol::Char('J')),
    Some(PressedSymbol::Char('L')),
    Some(PressedSymbol::Char('"')),
    Some(PressedSymbol::Tab),
    Some(PressedSymbol::Char('W')),
    Some(PressedSymbol::Char('R')),
    Some(PressedSymbol::Char('Y')),
    Some(PressedSymbol::Char('I')),
    Some(PressedSymbol::Char('P')),
    Some(PressedSymbol::Char('}')),
    Some(PressedSymbol::Char('~')),
    Some(PressedSymbol::Char('@')),
    Some(PressedSymbol::Char('$')),
    Some(PressedSymbol::Char('^')),
    Some(PressedSymbol::Char('*')),
    Some(PressedSymbol::Char(')')),
    Some(PressedSymbol::Char('+')),
];

const SYMBOL_MAP_RU: [Option<PressedSymbol>; 56] = [
    None,
    Some(PressedSymbol::Char('я')),
    Some(PressedSymbol::Char('с')),
    Some(PressedSymbol::Char('и')),
    Some(PressedSymbol::Char('ь')),
    Some(PressedSymbol::Char('ю')),
    Some(PressedSymbol::Char(' ')),
    None,
    Some(PressedSymbol::Char('ы')),
    Some(PressedSymbol::Char('а')),
    Some(PressedSymbol::Char('р')),
    Some(PressedSymbol::Char('л')),
    Some(PressedSymbol::Char('ж')),
    Some(PressedSymbol::Enter),
    Some(PressedSymbol::Char('й')),
    Some(PressedSymbol::Char('у')),
    Some(PressedSymbol::Char('е')),
    Some(PressedSymbol::Char('г')),
    Some(PressedSymbol::Char('щ')),
    Some(PressedSymbol::Char('х')),
    Some(PressedSymbol::Char('ё')),
    Some(PressedSymbol::Char('1')),
    Some(PressedSymbol::Char('3')),
    Some(PressedSymbol::Char('5')),
    Some(PressedSymbol::Char('7')),
    Some(PressedSymbol::Char('9')),
    Some(PressedSymbol::Char('_')),
    Some(PressedSymbol::Backspace),
    None,
    None,
    Some(PressedSymbol::Char('ч')),
    Some(PressedSymbol::Char('м')),
    Some(PressedSymbol::Char('т')),
    Some(PressedSymbol::Char('б')),
    Some(PressedSymbol::Char('.')),
    None,
    Some(PressedSymbol::Char('ф')),
    Some(PressedSymbol::Char('в')),
    Some(PressedSymbol::Char('п')),
    Some(PressedSymbol::Char('о')),
    Some(PressedSymbol::Char('д')),
    Some(PressedSymbol::Char('э')),
    Some(PressedSymbol::Tab),
    Some(PressedSymbol::Char('ц')),
    Some(PressedSymbol::Char('к')),
    Some(PressedSymbol::Char('н')),
    Some(PressedSymbol::Char('ш')),
    Some(PressedSymbol::Char('з')),
    Some(PressedSymbol::Char('ъ')),
    Some(PressedSymbol::Char('`')),
    Some(PressedSymbol::Char('2')),
    Some(PressedSymbol::Char('4')),
    Some(PressedSymbol::Char('6')),
    Some(PressedSymbol::Char('8')),
    Some(PressedSymbol::Char('0')),
    Some(PressedSymbol::Char('=')),
];

const SYMBOL_MAP_RU_SHIFTED: [Option<PressedSymbol>; 56] = [
    None,
    Some(PressedSymbol::Char('Я')),
    Some(PressedSymbol::Char('С')),
    Some(PressedSymbol::Char('И')),
    Some(PressedSymbol::Char('Ь')),
    Some(PressedSymbol::Char('Ю')),
    Some(PressedSymbol::Char(' ')),
    None,
    Some(PressedSymbol::Char('Ы')),
    Some(PressedSymbol::Char('А')),
    Some(PressedSymbol::Char('Р')),
    Some(PressedSymbol::Char('Л')),
    Some(PressedSymbol::Char('Ж')),
    Some(PressedSymbol::Enter),
    Some(PressedSymbol::Char('Й')),
    Some(PressedSymbol::Char('У')),
    Some(PressedSymbol::Char('Е')),
    Some(PressedSymbol::Char('Г')),
    Some(PressedSymbol::Char('Щ')),
    Some(PressedSymbol::Char('Х')),
    Some(PressedSymbol::Char('Ё')),
    Some(PressedSymbol::Char('!')),
    Some(PressedSymbol::Char('#')),
    Some(PressedSymbol::Char('%')),
    Some(PressedSymbol::Char('&')),
    Some(PressedSymbol::Char('(')),
    Some(PressedSymbol::Char('-')),
    Some(PressedSymbol::Backspace),
    None,
    None,
    Some(PressedSymbol::Char('Ч')),
    Some(PressedSymbol::Char('М')),
    Some(PressedSymbol::Char('Т')),
    Some(PressedSymbol::Char('Б')),
    Some(PressedSymbol::Char('.')),
    None,
    Some(PressedSymbol::Char('Ф')),
    Some(PressedSymbol::Char('В')),
    Some(PressedSymbol::Char('П')),
    Some(PressedSymbol::Char('О')),
    Some(PressedSymbol::Char('Д')),
    Some(PressedSymbol::Char('Э')),
    Some(PressedSymbol::Tab),
    Some(PressedSymbol::Char('Ц')),
    Some(PressedSymbol::Char('К')),
    Some(PressedSymbol::Char('Н')),
    Some(PressedSymbol::Char('Ш')),
    Some(PressedSymbol::Char('З')),
    Some(PressedSymbol::Char('Ъ')),
    Some(PressedSymbol::Char('~')),
    Some(PressedSymbol::Char('@')),
    Some(PressedSymbol::Char('$')),
    Some(PressedSymbol::Char('^')),
    Some(PressedSymbol::Char('*')),
    Some(PressedSymbol::Char(')')),
    Some(PressedSymbol::Char('+')),
];
